# when to abbriviate and when not?
# b doesn't work here, because it ignores whitespace
# optional local name?
snippet /^imp/ "Import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet /^pack/ "Package declaration" r
// Package $1 provides ${2:...}
package ${1:main}
endsnippet

# Mostly converted from: https://github.com/AlanQuatermain/go-tmbundle
snippet /^cons/ "Constants declaration" r
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^con/ "Constant declaration" r
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet iota "Iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet struct "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet inf "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet in "interface"
interface{}
endsnippet

snippet if "If statement" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet ife "if else condition"
if ${1:/* condition */} {
	${2:${VISUAL}}
} else {
	${0}
}
endsnippet

# error handling
snippet iferr "Basic error handling" b
if ${1:${2:statement}; }err != nil {
	log.${3:Fatal}(${4:err})$0
}
endsnippet

snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case$0
}
endsnippet

# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	${0:${VISUAL}}
}
endsnippet

snippet gof "goroutine anonymous function"
go func(${1:params}) {
	${0:/* code */}
}(${2})
endsnippet

snippet golf "goroutine anonymous inline function"
go func(${1:params}) { ${0:/* code */} }(${2})
endsnippet

# types and variables
snippet map "Map type"
map[${1:keytype}]${2:valtype}
endsnippet

snippet : "Variable declaration :=" b
${1:name} := ${0:value}
endsnippet

snippet var "Variable declaration" b
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}
endsnippet

snippet vars "Variables declaration" b
var (
	${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
)
endsnippet

snippet mk "make"
make(${1:[]string}${2:, ${3:val}})
endsnippet

snippet json "JSON field"
\`json:"${1:displayName}"\`
endsnippet

# vim-snippets
snippet ap "append"
append(${1:slice}, ${0:value})
endsnippet

snippet bl "bool"
bool
endsnippet

snippet bt "byte"
byte
endsnippet

snippet br "break"
break
endsnippet

snippet co "constants with iota"
const (
	${1:NAME1} = iota
	${0:NAME2}
)
endsnippet

snippet dfr "defer recover"
defer func() {
	if err := recover(); err != nil {
		${0:${VISUAL}}
	}
}()
endsnippet

snippet el "else"
else {
	${0:${VISUAL}}
}
endsnippet

snippet ir "if error not nil, return err"
if err != nil {
	return err
}
${0}
endsnippet

snippet ft "fallthrough"
fallthrough
endsnippet

snippet for "for loop"
for ${1}{
	${0:${VISUAL}}
}
endsnippet

snippet fori "for int loop"
for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {
	${0:${VISUAL}}
}
endsnippet

snippet forr "for range loop"
for ${1:e} := range ${2:collection} {
	${0:${VISUAL}}
}
endsnippet

snippet fumh "http handler function on receiver"
func (${1:receiver} ${2:type}) ${3:funcName}(${4:w} http.ResponseWriter, ${5:r} *http.Request) {
	${0:${VISUAL}}
}
endsnippet

snippet lf "log printf"
log.Printf("%${1:s}", ${2:var})
endsnippet

snippet lp "log println"
log.Println(${1})
endsnippet

snippet main "func main()"
func main() {
	${1}
}
${0}
endsnippet

snippet pn "panic"
panic("${0:msg}")
endsnippet

snippet pf "fmt.Printf()"
fmt.Printf("${1:s}\n", ${2:var})
endsnippet

snippet pl "fmt.Println()"
fmt.Println(${1:s})
endsnippet

snippet spf "fmt.Sprintf"
fmt.Sprintf("${1:s}", ${2:var})
endsnippet

snippet chs "channel send" b
${1:ch} <- ${2:val}$0
endsnippet

snippet chr "channel receieve" b
<-${1:ch}$0
endsnippet

snippet sel "select"
select {
case ${1:v1} := <-${2:chan1}
	${3}
default:
	${0}
}
endsnippet

snippet tes "test function"
func Test${1:name}(t *testing.T) {
	${0:${VISUAL}}
}
endsnippet

snippet ttes "table test function"
func Test${1:name}(t *testing.T) {
	tests := []struct {
		name string
	}{
		{
			name: "${2:test name}",
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			${0:${VISUAL}}
		})
	}
}
endsnippet

snippet bm "benchmark function"
func Benchmark${1:name}(b *testing.B) {
	for i := 0; i < b.N; i++ {
		${2}
	}
}
${0}
endsnippet

snippet ifmap "if key in a map"
if ${1:value}, ok := ${2:map}[${3:key}]; ok == true {
	${4:/* code */}
}
endsnippet

snippet structa "Grouped globals with anonymous struct"
var ${1:var} = struct{
	${2:name} ${3:type}
}{
	$2: ${4:value},
}
endsnippet

snippet ja "Marshalable json alias"
type ${1:parentType}Alias $1

func (p *$1) MarshalJSON() ([]byte, error) {
	return json.Marshal(&struct{ *$1Alias }{(*$1Alias)(p)})
}
endsnippet

snippet errwr "Error handling with errors.Wrap"
if ${1}err != nil {
	return errors.Wrap(err, "${2}")
}
endsnippet
