# Attach or create tmux session
# session name defaults to pwd
path_name="$(basename "$PWD" | tr . -)"
session_name=${1:-$path_name}
window_name=${2:-''}
shell_command=${3:-''}

in_tmux() {
  [[ -n $TMUX ]]
}

session_exists() {
  tmux has-session -t "$session_name" &> /dev/null
}

create_detached_session() {
  session_exists && return

  TMUX='' tmux new-session -d -s "$session_name"
  new_session=$?
}

# create window with name
create_window() {
  # no window name given or already exists
  [[ -z $window_name ]] || contains_window "$window_name" && return

  if [[ -n $new_session && $new_session -eq 0 ]]; then
    tmux rename-window -t "$session_name:1" "$window_name"
  else
    tmux new-window -t "$session_name" -n "$window_name"
  fi

  run_shell_command
}

run_shell_command() {
  [[ -z $shell_command ]] && return

  tmux send -t "$session_name:$window_name" "$shell_command && clear" ENTER
}

contains_window() {
  names=$(tmux list-windows -t "$session_name" -F '#{window_name}')
  names=($(echo $names | tr '\n' ' '))

  for item in ${names[@]}; do
    [[ $item == $1 ]] && return 0
  done

  return 1
}

connect_session() {
  if [[ -n $window_name ]]; then
    local target="$session_name:$window_name"
  else
    local target="$session_name"
  fi

  if ! in_tmux; then
    tmux attach-session -t "$target"
  else
    tmux switch-client -t "$target"
  fi
}

create_if_needed_and_attach() {
  create_detached_session
  create_window
  connect_session
}

create_if_needed_and_attach
# vi: set ft=sh:
